{"version":3,"file":"static/js/260.8ffc80d2.chunk.js","mappings":"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","sources":["components/dashboard/constants.js","components/dashboard/MarkerCluster.js","components/dashboard/LeafletMap.js","components/dashboard/ActiveUsersMap.js"],"sourcesContent":["import L from 'leaflet';\r\nimport markIcon from '../../assets/img/leaflet-icon/marker-icon.png';\r\n\r\nexport const customMarker = new L.Icon({\r\n  iconUrl: markIcon,\r\n  iconSize: [25, 41],\r\n  iconAnchor: [10, 41],\r\n  popupAnchor: [2, -40]\r\n});\r\n","import { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport L from 'leaflet';\r\nimport 'leaflet.markercluster/dist/leaflet.markercluster';\r\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\r\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\r\nimport { useLeaflet } from 'react-leaflet';\r\nimport { customMarker } from './constants';\r\n\r\nconst mcg = L.markerClusterGroup({\r\n  chunkedLoading: false,\r\n  spiderfyOnMaxZoom: false\r\n});\r\n\r\nconst MarkerCluster = ({ markers }) => {\r\n  const { map } = useLeaflet();\r\n\r\n  useEffect(() => {\r\n    mcg.clearLayers();\r\n    markers.map(({ lat, long, name, street, location }) => {\r\n      const popupContent = `\r\n        <h6 class=\"mb-1\">${name}</h6>\r\n        <p class=\"m-0 text-500\">${street}, ${location}</p>\r\n      `;\r\n      return L.marker(new L.LatLng(lat, long), {\r\n        icon: customMarker\r\n      })\r\n        .addTo(mcg)\r\n        .bindPopup(popupContent);\r\n    });\r\n\r\n    // optionally center the map around the markers\r\n    // map.fitBounds(mcg.getBounds());\r\n    // // add the marker cluster group to the map\r\n    map.addLayer(mcg);\r\n  }, [markers, map]);\r\n\r\n  return null;\r\n};\r\n\r\nMarkerCluster.propTypes = {\r\n  markers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      lat: PropTypes.number.isRequired,\r\n      long: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      street: PropTypes.string,\r\n      location: PropTypes.string\r\n    }).isRequired\r\n  ).isRequired\r\n};\r\n\r\nexport default MarkerCluster;\r\n","import React, { useContext } from 'react';\r\nimport { Map } from 'react-leaflet';\r\n\r\nimport MarkerCluster from './MarkerCluster';\r\nimport { markers } from '../../data/dashboard/activeUsers';\r\nimport 'leaflet.tilelayer.colorfilter';\r\nimport L from 'leaflet';\r\nimport { useRef } from 'react';\r\nimport AppContext from '../../context/Context';\r\nimport { useEffect } from 'react';\r\n\r\nconst LeafletMap = () => {\r\n  const { isDark } = useContext(AppContext);\r\n  const filter = isDark\r\n    ? ['invert:98%', 'grayscale:69%', 'bright:89%', 'contrast:111%', 'hue:205deg', 'saturate:1000%']\r\n    : ['bright:101%', 'contrast:101%', 'hue:23deg', 'saturate:225%'];\r\n\r\n  let mapRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (mapRef.current) {\r\n      L.tileLayer\r\n        .colorFilter('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n          attribution: null,\r\n          transparent: true,\r\n          filter: filter\r\n        })\r\n        .addTo(mapRef.current.leafletElement);\r\n    }\r\n  }, [filter]);\r\n\r\n  return (\r\n    <Map\r\n      center={[10.737, 0]}\r\n      zoom={1}\r\n      minZoom={1}\r\n      maxZoom={18}\r\n      zoomSnap={0.5}\r\n      className=\"h-100 bg-white\"\r\n      style={{ width: '100%', minHeight: 300 }}\r\n      ref={mapRef}\r\n    >\r\n      <MarkerCluster markers={markers} />\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default LeafletMap;\r\n","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  CustomInput\r\n} from 'reactstrap';\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\nimport LeafletMap from './LeafletMap';\r\n\r\nconst ActiveUsersMap = () => {\r\n  const [duration, setDuration] = useState('week');\r\n\r\n  return (\r\n    <Card className=\"h-100 mt-3 mt-lg-0\">\r\n      <CardHeader className=\"bg-light d-flex justify-content-between\">\r\n        <h5 className=\"mb-0\">Active users</h5>\r\n        <UncontrolledDropdown className=\"text-sans-serif\">\r\n          <DropdownToggle color=\"link\" size=\"sm\" className=\"text-600 dropdown-caret-none\" boundary=\"viewport\">\r\n            <FontAwesomeIcon icon=\"ellipsis-h\" className=\"fs--1\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu className=\"border py-0\" right>\r\n            <div className=\"bg-white py-2\">\r\n              <DropdownItem>Edit</DropdownItem>\r\n              <DropdownItem>Move</DropdownItem>\r\n              <DropdownItem>Resize</DropdownItem>\r\n              <DropdownItem divider />\r\n              <DropdownItem className=\"text-warning\">Archive</DropdownItem>\r\n              <DropdownItem className=\"text-danger\">Delete</DropdownItem>\r\n            </div>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </CardHeader>\r\n      <CardBody className=\"p-0 overflow-hidden h-100\">\r\n        <LeafletMap />\r\n      </CardBody>\r\n      <CardFooter className=\"bg-light\">\r\n        <Row className=\"justify-content-between\">\r\n          <Col xs=\"auto\">\r\n            <CustomInput\r\n              type=\"select\"\r\n              bsSize=\"sm\"\r\n              id=\"selectDuration\"\r\n              value={duration}\r\n              onChange={({ target }) => setDuration(target.value)}\r\n            >\r\n              <option value=\"week\">Last 7 days</option>\r\n              <option value=\"month\">Last month</option>\r\n              <option value=\"year\">Last year</option>\r\n            </CustomInput>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button color=\"falcon-default\" size=\"sm\">\r\n              <span className=\"d-none d-sm-inline-block mr-1\">Location</span>Overview\r\n              <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--1\" />\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ActiveUsersMap;\r\n"],"names":["customMarker","L","iconUrl","iconSize","iconAnchor","popupAnchor","mcg","chunkedLoading","spiderfyOnMaxZoom","MarkerCluster","_ref","markers","map","useLeaflet","useEffect","clearLayers","_ref2","lat","long","name","street","location","popupContent","concat","icon","addTo","bindPopup","addLayer","propTypes","PropTypes","isRequired","LeafletMap","isDark","useContext","AppContext","filter","mapRef","useRef","current","colorFilter","attribution","transparent","leafletElement","_jsx","Map","center","zoom","minZoom","maxZoom","zoomSnap","className","style","width","minHeight","ref","children","ActiveUsersMap","duration","setDuration","useState","_jsxs","Card","CardHeader","UncontrolledDropdown","DropdownToggle","color","size","boundary","FontAwesomeIcon","DropdownMenu","right","DropdownItem","divider","CardBody","CardFooter","Row","Col","xs","CustomInput","type","bsSize","id","value","onChange","target","Button"],"sourceRoot":""}